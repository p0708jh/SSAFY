binary search (쿼리가 많을때(여러번 찾을때) 효율적) : O(logN)
: target이 존재하는가?

// #1. 어떤 범위를 탐색 해야하는가


// #2. left,right, mid

parametiric search

lower bound/ upper bound를 찾는다(마지노선을 찾는다, 가능성(mid)을 찾는다)

Two pinter(sliding window)

두개의 포인터를 사용-> 원하는 정답 "첨가 알고리즘"

1. slow fast 형태 : 같은방향
2. start end 형태 : 반대방향

sliding window

1. 초기 포인터 세팅 -> 시작위치 ~ 구간크기
2. 초기 공통 구간 세팅-> 첫 완전체 구간에서->마지막(right)포인터가 가리키는 값을 뺀 구간

sliding window-> right가 배열의 크기를 벗어날때까지
	1. 구간 완성 -> right 포인터가 가리키는 값을 더해준다.
	2. 수행 -> 이 구간을 가지고 하려고 했던걸 한다.
	3. 다음 공통 구간을 만듬 ->left 포인터가 가리키는 값을 뺀다
	4. 구간이 옮겨가니까 -> left와 right 포인터도 한칸씩 이동



#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <cmath>
using namespace std;
typedef long long ll;

int arr[] = { 1,2,3,4,5,6,7,8,9,10};

void bs(int target) {    
    // #1. 내가 어떤 범위를 탐색하는가? 
    // --> 배열 내에만 존재하는 요소를 찾는다 : index 
    // --> 특정 정수 내의 범위이다 : 시작 끝 
    int left = 0;
    int right = 9; 
    int flag = 0; 
    
    while (left <= right) {
        // mid를 예측한다! 
        int mid = (left + right) / 2; 
        // 만약 mid가 내가 찾고자 하는 값이라면 
        if (arr[mid] == target) {
            // 찾았다! 
            flag = 1; 
            // 이미 찾았으면 더 탐색해볼 필요 X 
            break; 
        }
        else if (target < arr[mid]) {
            right = mid - 1; 
        }
        else if (target > arr[mid]) {
            left = mid + 1; 
        }
    }
    // 찾앗으면 1, 아니면 0
    cout << flag; 
}


int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

    int target; // 찾고자 하는 숫자
    //cin >> target;

    //sort(arr, arr + 10);
    //bs(target);


    int N = 3; // 구간 크기
    //sliding window
    //1. 초기 포인터 세팅
    int left = 0;
    int right = N - 1;

    int sum = 0;
    for (int i = left; i < right; i++)
        sum += arr[i];
    
    int ans = 21e8;

    while (right < 10) {
        sum += arr[right];

        if (sum < ans)
            ans = sum;

        sum -= arr[left];
        left++;
        right++;
    }

    cout << ans;
	return 0;
}