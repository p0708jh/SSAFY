	프론트엔드 서버로부터 JSON 데이터를 받는다

과거: 브러우저에서 동작하는 코드 구현

현재: 프론트엔드 서버도 알아야 한다, 과거에 비해 할 일이 늘어났다

	SSR(MPA) vs CSR(SPA)

	SSR(MPA)
	
전통적
서버 사이드 렌더링(서버에서 화면을 만든다)
클라이언트는 완성된 HTML을 서버로부터 받는다.
서버로부터 계속 html을 요청
서버의 부하 큼
새로고침 발생
SEO(검색엔진 최적화) 강함

	CSR(SPA)

현대적
클라이언트 사이드 렌더링(클라이언트에서 화면을 만든다)
클라이언트는 최소한의 HTML을 받은 후 서버로부터 데이터 받어서 HTML 변경
최초에 한 번 하나의 HTML을 서버로부터 받은 후 더이상 요청하지 않는다
서버 부하 작음
새로고침 발생 안함
SEO(검색엔진 최적화) 약함

	SPA Framework

Angular
React (o)
vue (o)
svelte

	SPA를 구현하려면 꼭 프레임워크를 써야할까(X)

	Vue 특징

JavaScript 보다 쉬운 화면조작
	v-if,v-for...
Virtual Dom 사용(가상돔)
컴포넌트-화면의 각 부분을 나눠 조립식으로 개발, 재사용성 증가,협업,유지보수에 좋음
progressive JavaScript Framework
SPA(CSR) 서버 부담을 덜어줌

	virtual DOM
DOM 안에 요소들(엘리먼트)이 많아지면 핸들링 어려움
그래서 Real DOM 이 아닌, Virtual DOM 사용해 조작
변경사항이 많은 웹페이지에 유리

MVVM 패턴
View(브라우저) ViewModel(vue.js) Model(서버)

vue의 패턴

model,viewmodel,view

view 에서 입력받음, model에 데이터 저장

vue는 둘의 중간에 있는 viewmodel 에서 담당

view에서 이벤트 발생 ⇒ viewmodel 의 콜백함수를 호출

viewmodel의 데이터가 변경 ⇒ view, model 즉시 변경

view와 model 사이 의존성 제거

data

vue instance 에서 변수 생성시 사용

methods

vue instance 에서 메서드 생성 시 사용

바인딩

단방향: {{ }}. v-bind (태그의 속성을 변경할때 props로 데이터를 내려 보낼때)

양방향: v-model (input이 나오면 v-model을 사용)

v-bind

태그의 에트리뷰트 변경

props에 사용

축약 : (콜론)

v-model

사용자 입력 → 데이터 변함

축약 없음

v-on

이벤트 받을 때 사용

ex) v-on:click

축약 @click

v-if=”seen” //seen 이라는 문자열이 아닌 seen이라는 데이터

v-for="list in lists" :key="[list.id](http://list.id/)">{{list.title}}

vue CLI

vue 프로젝트 생성 시 사용

vuex,vue-router 등 추가 가능

$  vue create [프로젝트 이름] (현재경로는 .)

vue babel 언어

vue router

서드파티 라이브러리

라우터에 컴포넌트를 매핑해서 사용

어떤 url에서 렌더링 할지 결정

props

부모 컴퓨ㅗ넌트 → 자식 컴포넌트로 데이터 전달

v-bind 축약 :(콜론)

자식에서

props: [ ]  이와 같이 배열의 형태로 받는다

emit

자식 컴포넌트에서, 부모 함수 호출

자식 컴포넌트에서, 부모 컴포넌트로 이벤트 전달

v-on 축약 @

props/emit 은 부모자식 관계여야만 한다 (O)

vuex

상태(state)관리 패턴 + 라이브러리

모든 컴포넌트의 중앙 저장소

props/emit 의 반복 사용으로, 데이터 관리 힘들어 사용

당연히, props/emit 과 같이 사용 가능

state 변경 시 ⇒ mutations

Bootstrap Vue

컴포넌트 방식으로 Bootstrap 사용

class는 똑같음

bootstrap-vue, bootstrap 둘 다 깔아야함 npm 사용해 설치 cdn도 가능